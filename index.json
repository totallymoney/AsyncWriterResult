[{"uri":"TODO: ADD_ROOT_LINK/explanations/overview.html","title":"AsyncWriterResult Overview","content":"\r\n# AsyncWriterResult\r\n"},{"uri":"TODO: ADD_ROOT_LINK/explanations/some-post.html","title":"Some Explanation","content":"\r\n# Some Explanation\r\n\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi nisi diam, vehicula quis blandit id, suscipit sed libero. Proin at diam dolor. In hac habitasse platea dictumst. Donec quis dui vitae quam eleifend dignissim non sed libero. In hac habitasse platea dictumst. In ullamcorper mollis risus, a vulputate quam accumsan at. Donec sed felis sodales, blandit orci id, vulputate orci.\r\n\r\nIn est nulla, ornare vitae elit sed, consequat sollicitudin dui. Duis posuere nulla malesuada elit volutpat ultricies. Mauris et tellus tortor. In ligula elit, pellentesque eget est et, mattis rhoncus nisl. Sed orci ex, mollis quis justo eu, dapibus tincidunt turpis. Sed rhoncus odio non lacus ullamcorper volutpat. Suspendisse blandit ullamcorper condimentum. Quisque et viverra nisi. Vivamus in mollis nulla. Nulla faucibus sed ligula et blandit.\r\n\r\nVivamus nec libero faucibus, cursus ex et, consequat mauris. Pellentesque commodo ullamcorper vestibulum. Donec efficitur, ipsum et dapibus varius, purus mauris gravida augue, eu mattis lorem turpis eget dui. Curabitur nibh erat, posuere sed eros a, blandit venenatis risus. Vestibulum cursus imperdiet ultrices. In eu efficitur dui, eget tempus enim. Nunc imperdiet, enim et sagittis lacinia, lacus metus eleifend purus, blandit pellentesque leo ante ac velit. Nam ac sagittis est. Cras accumsan, odio vel lacinia mollis, metus tortor malesuada nisi, et consectetur neque quam in erat. Sed ultricies aliquam hendrerit. Etiam non aliquam ipsum, id rutrum magna. Morbi id tincidunt mauris. Vestibulum nec iaculis massa. Etiam fringilla, orci quis faucibus vulputate, risus nibh finibus nisl, et vehicula ipsum leo a tortor. Curabitur mauris elit, bibendum vitae velit at, dignissim ornare arcu.\r\n\r\n"},{"uri":"TODO: ADD_ROOT_LINK/how-tos/diagrams.html","title":"Diagrams","content":"\r\nSome interesting diagram\r\n\r\n<div class=\"mermaid\">\r\n    graph TD\r\n    A[Client] --> B[Load Balancer]\r\n    B --> C[Server01]\r\n    B --> D[Server02]\r\n</div>\r\n\r\nGenerated with:\r\n\r\n```\r\n<div class=\"mermaid\">\r\n    graph TD\r\n    A[Client] --> B[Load Balancer]\r\n    B --> C[Server01]\r\n    B --> D[Server02]\r\n</div>\r\n```\r\n\r\nSome more diagrams\r\n\r\n<div class=\"mermaid\">\r\ngraph LR\r\n    A[Hard edge] -->|Link text| B(Round edge)\r\n    B --> C{Decision}\r\n    C -->|One| D[Result one]\r\n    C -->|Two| E[Result two]\r\n</div>\r\n\r\nGenerated with:\r\n\r\n```\r\n<div class=\"mermaid\">\r\ngraph LR\r\n    A[Hard edge] -->|Link text| B(Round edge)\r\n    B --> C{Decision}\r\n    C -->|One| D[Result one]\r\n    C -->|Two| E[Result two]\r\n</div>\r\n```\r\n\r\n\r\n"},{"uri":"TODO: ADD_ROOT_LINK/how-tos/somePostWithCode.html","title":"Some post with Code","content":"\r\nLiterate Markdown\r\n=================\r\n\r\nThis file demonstrates how to write Markdown document with\r\nembedded F# snippets that can be transformed into nice HTML.\r\n\r\nIn this case, the document itself is a valid Markdown and\r\nyou can use standard Markdown features to format the text:\r\n\r\n - Here is an example of unordered list and...\r\n - Text formatting including **bold** and _emphasis_\r\n\r\nFor more information, see the [Markdown][md] reference.\r\n\r\n [md]: http://daringfireball.net/projects/markdown\r\n\r\n\r\nWriting F# code\r\n---------------\r\nIn standard Markdown, you can include code snippets by\r\nwriting a block indented by four spaces and the code\r\nsnippet will be turned into a `<pre>` element. If you do\r\nthe same using Literate F# tool, the code is turned into\r\na nicely formatted F# snippet:\r\n\r\n    /// The Hello World of functional languages!\r\n    let rec factorial x =\r\n      if x = 0 then 1\r\n      else x * (factorial (x - 1))\r\n\r\n    let f10 = factorial 10\r\n\r\n\r\nHiding code\r\n-----------\r\n\r\nIf you want to include some code in the source code,\r\nbut omit it from the output, you can use the `hide`\r\ncommand. You can also use `module=...` to specify that\r\nthe snippet should be placed in a separate module\r\n(e.g. to avoid duplicate definitions).\r\n\r\n    [hide, module=Hidden]\r\n    /// This is a hidden answer\r\n    let answer = 42\r\n\r\nThe value will be deffined in the F# code that is\r\nprocessed and so you can use it from other (visible)\r\ncode and get correct tool tips:\r\n\r\n    let answer = Hidden.answer\r\n\r\n\r\nIncluding other snippets\r\n------------------------\r\n\r\nWhen writing literate programs as Markdown documents,\r\nyou can also include snippets in other languages.\r\nThese will not be colorized and processed as F#\r\ncode samples:\r\n\r\n    [lang=csharp]\r\n    Console.WriteLine(\"Hello world!\");\r\n\r\nThis snippet is turned into a `pre` element with the\r\n`lang` attribute set to `csharp`."},{"uri":"TODO: ADD_ROOT_LINK/tutorials/how-to-start.html","title":"Getting started","content":"\r\n# How to start in 60 seconds\r\n\r\n1. Make sure you've installed .Net Core version defined in [global.json](global.json)\r\n2. Run `dotnet tool restore` to install all developer tools required to build the project\r\n3. Run `dotnet fake build` to build default target of [build script](build.fsx)\r\n4. To run tests use `dotnet fake build -t Test`\r\n5. To build documentation use `dotnet fake build -t Docs`\r\n"},{"uri":"TODO: ADD_ROOT_LINK/tutorials/some-post.html","title":"Some Post","content":"\r\n# Some Post\r\n\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi nisi diam, vehicula quis blandit id, suscipit sed libero. Proin at diam dolor. In hac habitasse platea dictumst. Donec quis dui vitae quam eleifend dignissim non sed libero. In hac habitasse platea dictumst. In ullamcorper mollis risus, a vulputate quam accumsan at. Donec sed felis sodales, blandit orci id, vulputate orci.\r\n\r\nIn est nulla, ornare vitae elit sed, consequat sollicitudin dui. Duis posuere nulla malesuada elit volutpat ultricies. Mauris et tellus tortor. In ligula elit, pellentesque eget est et, mattis rhoncus nisl. Sed orci ex, mollis quis justo eu, dapibus tincidunt turpis. Sed rhoncus odio non lacus ullamcorper volutpat. Suspendisse blandit ullamcorper condimentum. Quisque et viverra nisi. Vivamus in mollis nulla. Nulla faucibus sed ligula et blandit.\r\n\r\nVivamus nec libero faucibus, cursus ex et, consequat mauris. Pellentesque commodo ullamcorper vestibulum. Donec efficitur, ipsum et dapibus varius, purus mauris gravida augue, eu mattis lorem turpis eget dui. Curabitur nibh erat, posuere sed eros a, blandit venenatis risus. Vestibulum cursus imperdiet ultrices. In eu efficitur dui, eget tempus enim. Nunc imperdiet, enim et sagittis lacinia, lacus metus eleifend purus, blandit pellentesque leo ante ac velit. Nam ac sagittis est. Cras accumsan, odio vel lacinia mollis, metus tortor malesuada nisi, et consectetur neque quam in erat. Sed ultricies aliquam hendrerit. Etiam non aliquam ipsum, id rutrum magna. Morbi id tincidunt mauris. Vestibulum nec iaculis massa. Etiam fringilla, orci quis faucibus vulputate, risus nibh finibus nisl, et vehicula ipsum leo a tortor. Curabitur mauris elit, bibendum vitae velit at, dignissim ornare arcu.\r\n\r\n"},{"uri":"TODO: ADD_ROOT_LINK/how-tos/script.html","title":"Sample sample","content":"\r\n(**\r\nLiterate script\r\n===============\r\n\r\nThis file demonstrates how to write literate F# script\r\nfiles (`*.fsx`) that can be transformed into nice HTML\r\n\r\nAs you can see, a comment starting with double asterisk\r\nis treated as part of the document and is transformed\r\nusing Markdown, which means that you can use:\r\n\r\n - Unordered or ordered lists\r\n - Text formatting including **bold** and _emphasis_\r\n\r\nAnd numerous other [Markdown][md] features.\r\n\r\n [md]: http://daringfireball.net/projects/markdown\r\n\r\nWriting F# code\r\n---------------\r\nCode that is not inside comment will be formatted as\r\na sample snippet (which also means that you can\r\nrun it in Visual Studio or MonoDevelop).\r\n*)\r\n\r\n/// The Hello World of functional languages!\r\nlet rec factorial x =\r\n  if x = 0 then 1\r\n  else x * (factorial (x - 1))\r\n\r\nlet f10 = factorial 10\r\n\r\n(**\r\nHiding code\r\n-----------\r\n\r\nIf you want to include some code in the source code,\r\nbut omit it from the output, you can use the `hide`\r\ncommand.\r\n*)\r\n\r\n(*** hide ***)\r\n/// This is a hidden answer\r\nlet hidden = 42\r\n\r\n(**\r\nThe value will be defined in the F# code and so you\r\ncan use it from other (visible) code and get correct\r\ntool tips:\r\n*)\r\n\r\nlet answer = hidden\r\n\r\n(**\r\nMoving code around\r\n------------------\r\n\r\nSometimes, it is useful to first explain some code that\r\nhas to be located at the end of the snippet (perhaps\r\nbecause it uses some definitions discussed in the middle).\r\nThis can be done using `include` and `define` commands.\r\n\r\nThe following snippet gets correct tool tips, even though\r\nit uses `laterFunction`:\r\n*)\r\n\r\n(*** include:later-bit ***)\r\n\r\n(**\r\nThen we can explain how `laterFunction` is defined:\r\n*)\r\n\r\nlet laterFunction() =\r\n  \"Not very difficult, is it?\"\r\n\r\n(**\r\nThis example covers pretty much all features that are\r\ncurrently implemented in `literate.fsx`, but feel free\r\nto [fork the project on GitHub][fs] and add more\r\nfeatures or report bugs!\r\n\r\n  [fs]: https://github.com/fsprojects/FSharp.Formatting\r\n\r\n*)\r\n\r\n(*** define:later-bit ***)\r\nlet sample =\r\n  laterFunction()\r\n  |> printfn \"Got: %s\""},{"uri":"TODO: ADD_ROOT_LINK/explanations/overview.html","title":"AsyncWriterResult Overview","content":"\r\n# AsyncWriterResult\r\n"},{"uri":"TODO: ADD_ROOT_LINK/explanations/some-post.html","title":"Some Explanation","content":"\r\n# Some Explanation\r\n\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi nisi diam, vehicula quis blandit id, suscipit sed libero. Proin at diam dolor. In hac habitasse platea dictumst. Donec quis dui vitae quam eleifend dignissim non sed libero. In hac habitasse platea dictumst. In ullamcorper mollis risus, a vulputate quam accumsan at. Donec sed felis sodales, blandit orci id, vulputate orci.\r\n\r\nIn est nulla, ornare vitae elit sed, consequat sollicitudin dui. Duis posuere nulla malesuada elit volutpat ultricies. Mauris et tellus tortor. In ligula elit, pellentesque eget est et, mattis rhoncus nisl. Sed orci ex, mollis quis justo eu, dapibus tincidunt turpis. Sed rhoncus odio non lacus ullamcorper volutpat. Suspendisse blandit ullamcorper condimentum. Quisque et viverra nisi. Vivamus in mollis nulla. Nulla faucibus sed ligula et blandit.\r\n\r\nVivamus nec libero faucibus, cursus ex et, consequat mauris. Pellentesque commodo ullamcorper vestibulum. Donec efficitur, ipsum et dapibus varius, purus mauris gravida augue, eu mattis lorem turpis eget dui. Curabitur nibh erat, posuere sed eros a, blandit venenatis risus. Vestibulum cursus imperdiet ultrices. In eu efficitur dui, eget tempus enim. Nunc imperdiet, enim et sagittis lacinia, lacus metus eleifend purus, blandit pellentesque leo ante ac velit. Nam ac sagittis est. Cras accumsan, odio vel lacinia mollis, metus tortor malesuada nisi, et consectetur neque quam in erat. Sed ultricies aliquam hendrerit. Etiam non aliquam ipsum, id rutrum magna. Morbi id tincidunt mauris. Vestibulum nec iaculis massa. Etiam fringilla, orci quis faucibus vulputate, risus nibh finibus nisl, et vehicula ipsum leo a tortor. Curabitur mauris elit, bibendum vitae velit at, dignissim ornare arcu.\r\n\r\n"},{"uri":"TODO: ADD_ROOT_LINK/how-tos/diagrams.html","title":"Diagrams","content":"\r\nSome interesting diagram\r\n\r\n<div class=\"mermaid\">\r\n    graph TD\r\n    A[Client] --> B[Load Balancer]\r\n    B --> C[Server01]\r\n    B --> D[Server02]\r\n</div>\r\n\r\nGenerated with:\r\n\r\n```\r\n<div class=\"mermaid\">\r\n    graph TD\r\n    A[Client] --> B[Load Balancer]\r\n    B --> C[Server01]\r\n    B --> D[Server02]\r\n</div>\r\n```\r\n\r\nSome more diagrams\r\n\r\n<div class=\"mermaid\">\r\ngraph LR\r\n    A[Hard edge] -->|Link text| B(Round edge)\r\n    B --> C{Decision}\r\n    C -->|One| D[Result one]\r\n    C -->|Two| E[Result two]\r\n</div>\r\n\r\nGenerated with:\r\n\r\n```\r\n<div class=\"mermaid\">\r\ngraph LR\r\n    A[Hard edge] -->|Link text| B(Round edge)\r\n    B --> C{Decision}\r\n    C -->|One| D[Result one]\r\n    C -->|Two| E[Result two]\r\n</div>\r\n```\r\n\r\n\r\n"},{"uri":"TODO: ADD_ROOT_LINK/how-tos/somePostWithCode.html","title":"Some post with Code","content":"\r\nLiterate Markdown\r\n=================\r\n\r\nThis file demonstrates how to write Markdown document with\r\nembedded F# snippets that can be transformed into nice HTML.\r\n\r\nIn this case, the document itself is a valid Markdown and\r\nyou can use standard Markdown features to format the text:\r\n\r\n - Here is an example of unordered list and...\r\n - Text formatting including **bold** and _emphasis_\r\n\r\nFor more information, see the [Markdown][md] reference.\r\n\r\n [md]: http://daringfireball.net/projects/markdown\r\n\r\n\r\nWriting F# code\r\n---------------\r\nIn standard Markdown, you can include code snippets by\r\nwriting a block indented by four spaces and the code\r\nsnippet will be turned into a `<pre>` element. If you do\r\nthe same using Literate F# tool, the code is turned into\r\na nicely formatted F# snippet:\r\n\r\n    /// The Hello World of functional languages!\r\n    let rec factorial x =\r\n      if x = 0 then 1\r\n      else x * (factorial (x - 1))\r\n\r\n    let f10 = factorial 10\r\n\r\n\r\nHiding code\r\n-----------\r\n\r\nIf you want to include some code in the source code,\r\nbut omit it from the output, you can use the `hide`\r\ncommand. You can also use `module=...` to specify that\r\nthe snippet should be placed in a separate module\r\n(e.g. to avoid duplicate definitions).\r\n\r\n    [hide, module=Hidden]\r\n    /// This is a hidden answer\r\n    let answer = 42\r\n\r\nThe value will be deffined in the F# code that is\r\nprocessed and so you can use it from other (visible)\r\ncode and get correct tool tips:\r\n\r\n    let answer = Hidden.answer\r\n\r\n\r\nIncluding other snippets\r\n------------------------\r\n\r\nWhen writing literate programs as Markdown documents,\r\nyou can also include snippets in other languages.\r\nThese will not be colorized and processed as F#\r\ncode samples:\r\n\r\n    [lang=csharp]\r\n    Console.WriteLine(\"Hello world!\");\r\n\r\nThis snippet is turned into a `pre` element with the\r\n`lang` attribute set to `csharp`."},{"uri":"TODO: ADD_ROOT_LINK/tutorials/how-to-start.html","title":"Getting started","content":"\r\n# How to start in 60 seconds\r\n\r\n1. Make sure you've installed .Net Core version defined in [global.json](global.json)\r\n2. Run `dotnet tool restore` to install all developer tools required to build the project\r\n3. Run `dotnet fake build` to build default target of [build script](build.fsx)\r\n4. To run tests use `dotnet fake build -t Test`\r\n5. To build documentation use `dotnet fake build -t Docs`\r\n"},{"uri":"TODO: ADD_ROOT_LINK/tutorials/some-post.html","title":"Some Post","content":"\r\n# Some Post\r\n\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi nisi diam, vehicula quis blandit id, suscipit sed libero. Proin at diam dolor. In hac habitasse platea dictumst. Donec quis dui vitae quam eleifend dignissim non sed libero. In hac habitasse platea dictumst. In ullamcorper mollis risus, a vulputate quam accumsan at. Donec sed felis sodales, blandit orci id, vulputate orci.\r\n\r\nIn est nulla, ornare vitae elit sed, consequat sollicitudin dui. Duis posuere nulla malesuada elit volutpat ultricies. Mauris et tellus tortor. In ligula elit, pellentesque eget est et, mattis rhoncus nisl. Sed orci ex, mollis quis justo eu, dapibus tincidunt turpis. Sed rhoncus odio non lacus ullamcorper volutpat. Suspendisse blandit ullamcorper condimentum. Quisque et viverra nisi. Vivamus in mollis nulla. Nulla faucibus sed ligula et blandit.\r\n\r\nVivamus nec libero faucibus, cursus ex et, consequat mauris. Pellentesque commodo ullamcorper vestibulum. Donec efficitur, ipsum et dapibus varius, purus mauris gravida augue, eu mattis lorem turpis eget dui. Curabitur nibh erat, posuere sed eros a, blandit venenatis risus. Vestibulum cursus imperdiet ultrices. In eu efficitur dui, eget tempus enim. Nunc imperdiet, enim et sagittis lacinia, lacus metus eleifend purus, blandit pellentesque leo ante ac velit. Nam ac sagittis est. Cras accumsan, odio vel lacinia mollis, metus tortor malesuada nisi, et consectetur neque quam in erat. Sed ultricies aliquam hendrerit. Etiam non aliquam ipsum, id rutrum magna. Morbi id tincidunt mauris. Vestibulum nec iaculis massa. Etiam fringilla, orci quis faucibus vulputate, risus nibh finibus nisl, et vehicula ipsum leo a tortor. Curabitur mauris elit, bibendum vitae velit at, dignissim ornare arcu.\r\n\r\n"},{"uri":"TODO: ADD_ROOT_LINK/how-tos/script.html","title":"Sample sample","content":"\r\n(**\r\nLiterate script\r\n===============\r\n\r\nThis file demonstrates how to write literate F# script\r\nfiles (`*.fsx`) that can be transformed into nice HTML\r\n\r\nAs you can see, a comment starting with double asterisk\r\nis treated as part of the document and is transformed\r\nusing Markdown, which means that you can use:\r\n\r\n - Unordered or ordered lists\r\n - Text formatting including **bold** and _emphasis_\r\n\r\nAnd numerous other [Markdown][md] features.\r\n\r\n [md]: http://daringfireball.net/projects/markdown\r\n\r\nWriting F# code\r\n---------------\r\nCode that is not inside comment will be formatted as\r\na sample snippet (which also means that you can\r\nrun it in Visual Studio or MonoDevelop).\r\n*)\r\n\r\n/// The Hello World of functional languages!\r\nlet rec factorial x =\r\n  if x = 0 then 1\r\n  else x * (factorial (x - 1))\r\n\r\nlet f10 = factorial 10\r\n\r\n(**\r\nHiding code\r\n-----------\r\n\r\nIf you want to include some code in the source code,\r\nbut omit it from the output, you can use the `hide`\r\ncommand.\r\n*)\r\n\r\n(*** hide ***)\r\n/// This is a hidden answer\r\nlet hidden = 42\r\n\r\n(**\r\nThe value will be defined in the F# code and so you\r\ncan use it from other (visible) code and get correct\r\ntool tips:\r\n*)\r\n\r\nlet answer = hidden\r\n\r\n(**\r\nMoving code around\r\n------------------\r\n\r\nSometimes, it is useful to first explain some code that\r\nhas to be located at the end of the snippet (perhaps\r\nbecause it uses some definitions discussed in the middle).\r\nThis can be done using `include` and `define` commands.\r\n\r\nThe following snippet gets correct tool tips, even though\r\nit uses `laterFunction`:\r\n*)\r\n\r\n(*** include:later-bit ***)\r\n\r\n(**\r\nThen we can explain how `laterFunction` is defined:\r\n*)\r\n\r\nlet laterFunction() =\r\n  \"Not very difficult, is it?\"\r\n\r\n(**\r\nThis example covers pretty much all features that are\r\ncurrently implemented in `literate.fsx`, but feel free\r\nto [fork the project on GitHub][fs] and add more\r\nfeatures or report bugs!\r\n\r\n  [fs]: https://github.com/fsprojects/FSharp.Formatting\r\n\r\n*)\r\n\r\n(*** define:later-bit ***)\r\nlet sample =\r\n  laterFunction()\r\n  |> printfn \"Got: %s\""},{"uri":"TODO: ADD_ROOT_LINK/reference/AsyncWriterResult/index.html","title":"AsyncWriterResult - API Reference","content":"AsyncWriterResult \n global"},{"uri":"TODO: ADD_ROOT_LINK/reference/AsyncWriterResult/global-asyncwriterresult.html","title":"AsyncWriterResult","content":"AsyncWriterResult \n  \n Async  AsyncWriter  AsyncWriterResult  Result  Writer  WriterResult  \n AsyncWriterResult<'ok, 'error, 'log>  AsyncWriterResultBuilder  ResultBuilder  Writer<'w, 't>  WriterBuilder  WriterResultBuilder  \n result  writer  writerResult  asyncWriterResult  \n "},{"uri":"TODO: ADD_ROOT_LINK/reference/AsyncWriterResult/asyncwriterresult-async.html","title":"Async","content":"Async \n  \n  \n  \n retn  map  bind  apply  toTask  runTaskSynchronously  \n "},{"uri":"TODO: ADD_ROOT_LINK/reference/AsyncWriterResult/asyncwriterresult-asyncwriter.html","title":"AsyncWriter","content":"AsyncWriter \n  \n  \n  \n retn  \n "},{"uri":"TODO: ADD_ROOT_LINK/reference/AsyncWriterResult/asyncwriterresult-asyncwriterresult.html","title":"AsyncWriterResult","content":"AsyncWriterResult \n  \n Operators  \n  \n retn  map  bind  apply  write  mapError  tryTo  traverseResultM  collect  \n "},{"uri":"TODO: ADD_ROOT_LINK/reference/AsyncWriterResult/asyncwriterresult-asyncwriterresult-operators.html","title":"Operators","content":"Operators \n  \n  \n  \n ( <!> )  ( >>= )  ( <*> )  \n "},{"uri":"TODO: ADD_ROOT_LINK/reference/AsyncWriterResult/asyncwriterresult-result.html","title":"Result","content":"Result \n  \n  \n  \n retn  apply  ( <!> )  ( <*> )  traverseResultM  \n "},{"uri":"TODO: ADD_ROOT_LINK/reference/AsyncWriterResult/asyncwriterresult-writer.html","title":"Writer","content":"Writer \n  \n  \n  \n run  retn  map  bind  apply  collect  write  \n "},{"uri":"TODO: ADD_ROOT_LINK/reference/AsyncWriterResult/asyncwriterresult-writerresult.html","title":"WriterResult","content":"WriterResult \n  \n  \n  \n retn  map  error  mapError  bind  apply  collect  write  \n "},{"uri":"TODO: ADD_ROOT_LINK/reference/AsyncWriterResult/asyncwriterresult-asyncwriterresult-3.html","title":"AsyncWriterResult<'ok, 'error, 'log>","content":"AsyncWriterResult<'ok, 'error, 'log> \n  \n "},{"uri":"TODO: ADD_ROOT_LINK/reference/AsyncWriterResult/asyncwriterresult-asyncwriterresultbuilder.html","title":"AsyncWriterResultBuilder","content":"AsyncWriterResultBuilder \n  \n ( .ctor )  Bind  Return  ReturnFrom  Zero "},{"uri":"TODO: ADD_ROOT_LINK/reference/AsyncWriterResult/asyncwriterresult-resultbuilder.html","title":"ResultBuilder","content":"ResultBuilder \n  \n ( .ctor )  Bind  Return  ReturnFrom  Zero "},{"uri":"TODO: ADD_ROOT_LINK/reference/AsyncWriterResult/asyncwriterresult-writer-2.html","title":"Writer<'w, 't>","content":"Writer<'w, 't> \n  \n Writer "},{"uri":"TODO: ADD_ROOT_LINK/reference/AsyncWriterResult/asyncwriterresult-writerbuilder.html","title":"WriterBuilder","content":"WriterBuilder \n  \n ( .ctor )  Bind  Return  ReturnFrom  Zero "},{"uri":"TODO: ADD_ROOT_LINK/reference/AsyncWriterResult/asyncwriterresult-writerresultbuilder.html","title":"WriterResultBuilder","content":"WriterResultBuilder \n  \n ( .ctor )  Bind  Return  ReturnFrom  Zero "}]